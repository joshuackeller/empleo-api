// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("PROXY_URL")
    directUrl = env("DANGEROUS_DATABASE_URL")
}

enum Font {
    inter
    notoSerif
}

enum Layout {
    one
    two
    three
    four
    five
}

model Organization {
    id                String    @id
    title             String
    slug              String    @unique
    dnsRecordId       String    @unique
    createdAt         DateTime  @default(now()) @map("created_at")
    updatedAt         DateTime  @updatedAt @map("updated_at")
    users             User[]
    admins            Admin[]
    listing           Listing[]
    images            Image[]   @relation("OrganizationImages")
    logoId            String?   @unique @map("logo_id")
    logo              Image?    @relation("LogoRelation", fields: [logoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    bannerId          String?   @unique @map("banner_id")
    banner            Image?    @relation("BannerRelation", fields: [bannerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    headerFont        Font      @default(inter) @map("header_font")
    bodyFont          Font      @default(inter) @map("body_font")
    primaryColor      String?   @map("primary_color")
    secondaryColor    String?   @map("secondary_color")
    accentColor       String?   @map("accent_color")
    description       String?   @map("description")
    longDescription   String?   @map("long_description")
    layout            Layout    @default(one) @map("layout")
    files             File[]    @relation("OrganizationFiles")
    eeocEnabled       Boolean   @default(false) @map("eeoc_enabled")
    veteranEnabled    Boolean   @default(false) @map("veteran_enabled")
    disabilityEnabled Boolean   @default(false) @map("disability_enabled")
    raceEnabled       Boolean   @default(false) @map("race_enabled")
    genderEnabled     Boolean   @default(false) @map("gender_enabled")

    @@map("organization")
}

model Admin {
    id             String            @id
    firstName      String            @map("first_name")
    lastName       String?           @map("last_name")
    email          String            @unique
    emailConfirmed Boolean           @default(false) @map("email_confirmed")
    selfCreated    Boolean           @default(false) @map("self_created")
    createdAt      DateTime          @default(now()) @map("created_at")
    updatedAt      DateTime          @updatedAt @map("updated_at")
    password       Password?
    organizations  Organization[]
    notes          ApplicationNote[]

    @@map("admin")
}

model User {
    id             String         @id
    email          String         @unique
    emailConfirmed Boolean        @default(false) @map("email_confirmed")
    createdAt      DateTime       @default(now()) @map("created_at")
    updatedAt      DateTime       @updatedAt @map("updated_at")
    organizations  Organization[]
    applications   Application[]

    @@map("user")
}

model Password {
    id      String  @id
    adminId String? @unique @map("admin_id")
    admin   Admin?  @relation(fields: [adminId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    hash    String

    @@map("password")
}

model Listing {
    id                        String        @id
    organizationId            String?       @map("organization_id")
    organization              Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    published                 Boolean       @default(false)
    jobTitle                  String        @map("job_title")
    location                  String?
    employmentType            String?       @map("employment_type")
    salaryRange               String?       @map("salary_range")
    shortDescription          String?       @map("short_description")
    jobDescription            String?       @map("job_description")
    jobRequirements           String?       @map("job_requirements")
    createdAt                 DateTime      @default(now()) @map("created_at")
    updatedAt                 DateTime      @updatedAt @map("updated_at")
    Application               Application[]
    // ENABLE FIELDS
    linkedInUrlEnabled        Boolean       @default(true) @map("linkedin_url_enabled")
    noteEnabled               Boolean       @default(true) @map("note_enabled")
    resumeEnabled             Boolean       @default(true) @map("resume_enabled")
    coverLetterEnabled        Boolean       @default(false) @map("cover_letter_enabled")
    availableStartDateEnabled Boolean       @default(false) @map("available_start_date_enabled")
    phoneEnabled              Boolean       @default(false) @map("phone_enabled")
    addressEnabled            Boolean       @default(false) @map("address_enabled")
    cityEnabled               Boolean       @default(false) @map("city_enabled")
    stateEnabled              Boolean       @default(false) @map("state_enabled")
    zipEnabled                Boolean       @default(false) @map("zip_enabled")
    usAuthorizedEnabled       Boolean       @default(false) @map("us_authorized_enabled")

    @@unique([organizationId, id])
    @@index([organizationId])
    @@map("listing")
}

enum Gender {
    male
    female
    prefer_not_to_say
    other
}

enum Status {
    new
    in_review
    rejected
    interview
    offer_pending
    offer_accepted
    offer_rejected
}

model Application {
    id                   String            @id
    organizationId       String            @map("organization_id")
    listingId            String            @map("listing_id")
    listing              Listing           @relation(fields: [organizationId, listingId], references: [organizationId, id], onDelete: Cascade, onUpdate: Cascade)
    userId               String            @map("user_id")
    user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    status               Status            @default(new) @map("status")
    applicataionNotes    ApplicationNote[]
    // REQUIRED
    firstName            String            @map("first_name")
    lastName             String            @map("last_name")
    // OPTIONAL - DEFAULT TRUE
    linkedInUrl          String?           @map("linkedin_url")
    note                 String?           @map("note")
    resumeId             String?           @unique @map("resume_id")
    resume               File?             @relation("ApplicationResume", fields: [resumeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    // OPTIONAL - DEFAULT FALSE
    coverLetterId        String?           @unique @map("cover_letter_id")
    coverLetter          File?             @relation("ApplicationCoverLetter", fields: [coverLetterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    availableStartDate   DateTime?         @map("available_start_date")
    phone                String?           @map("phone")
    address              String?           @map("address")
    city                 String?           @map("city")
    state                String?           @map("state")
    zip                  String?           @map("zip")
    usAuthorized         Boolean?          @map("us_authorized")
    eeocRace             String?           @map("eeoc_race")
    eeocVeteranStatus    String?           @map("eeoc_veteran_status")
    eeocDisabilityStatus String?           @map("eeoc_disability_status")
    eeocGender           Gender?           @map("eeoc_gender")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@unique([organizationId, id])
    @@unique([organizationId, listingId, id])
    @@unique([organizationId, listingId, userId])
    @@index([organizationId, listingId])
    @@map("application")
}

model ApplicationNote {
    id             String      @id
    organizationId String
    applicationId  String
    application    Application @relation(fields: [organizationId, applicationId], references: [organizationId, id], onDelete: Cascade, onUpdate: Cascade)
    text           String
    adminId        String      @map("admin_id")
    admin          Admin       @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt      DateTime    @default(now()) @map("created_at")
    updatedAt      DateTime    @updatedAt @map("updated_at")

    @@unique([organizationId, id])
    @@unique([organizationId, applicationId, id])
    @@index([organizationId, applicationId])
}

model Image {
    id                 String        @id
    organizationId     String        @map("organization_id")
    organization       Organization  @relation("OrganizationImages", fields: [organizationId], references: [id])
    url                String
    organizationLogo   Organization? @relation("LogoRelation")
    organizationBanner Organization? @relation("BannerRelation")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@unique([organizationId, id])
    @@index([organizationId])
    @@map("image")
}

model File {
    id                     String       @id
    organizationId         String       @map("organization_id")
    organization           Organization @relation("OrganizationFiles", fields: [organizationId], references: [id])
    name                   String
    s3Key                  String       @map("s3_key")
    applicationResume      Application? @relation("ApplicationResume")
    applicationCoverLetter Application? @relation("ApplicationCoverLetter")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@unique([organizationId, id])
    @@index([organizationId])
    @@map("file")
}
