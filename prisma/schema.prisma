// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("PROXY_URL")
    directUrl = env("DANGEROUS_DATABASE_URL")
}

enum Font {
    inter
    notoSerif
}

model Organization {
    id          String    @id
    title       String
    slug        String    @unique
    dnsRecordId String    @unique
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")
    users       User[]
    admins      Admin[]
    listing     Listing[]
    images      Image[]   @relation("OrganizationImages")
    
    // logoId      String?   @unique @map("logo_id")
    // logo        Image?    @relation(fields: [logoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    // bannerId    String?   @unique @map("banner_id")
    // banner      Image?    @relation(fields: [bannerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    logoId      String?   @unique @map("logo_id")
    logo        Image?    @relation("LogoRelation", fields: [logoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    bannerId    String?   @unique @map("banner_id")
    banner      Image?    @relation("BannerRelation", fields: [bannerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    headerFont  Font      @default(inter) @map("header_font")
    bodyFont    Font      @default(inter) @map("body_font")
    primaryColor String?  @map("primary_color")
    secondaryColor String? @map("secondary_color")
    accentColor String?    @map("accent_color")
    description String?   @map("description")
    longDescription String? @map("long_description")

    @@map("organization")
}

model Admin {
    id             String         @id
    firstName      String         @map("first_name")
    lastName       String?        @map("last_name")
    email          String         @unique
    emailConfirmed Boolean        @default(false) @map("email_confirmed")
    selfCreated    Boolean        @default(false) @map("self_created")
    createdAt      DateTime       @default(now()) @map("created_at")
    updatedAt      DateTime       @updatedAt @map("updated_at")
    password       Password?
    organizations  Organization[]

    @@map("admin")
}

model User {
    id             String         @id
    firstName      String         @map("first_name")
    lastName       String?        @map("last_name")
    email          String         @unique
    emailConfirmed Boolean        @default(false) @map("email_confirmed")
    createdAt      DateTime       @default(now()) @map("created_at")
    updatedAt      DateTime       @updatedAt @map("updated_at")
    password       Password?
    organizations  Organization[]

    @@map("user")
}

model Password {
    id      String  @id
    adminId String? @unique @map("admin_id")
    admin   Admin?  @relation(fields: [adminId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId  String? @unique @map("user_id")
    user    User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    hash    String

    @@map("password")
}

model Listing {
    id              String        @id
    organizationId  String?       @map("organization_id")
    organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    published       Boolean       @default(false)
    jobTitle        String        @map("job_title")
    location        String?
    employmentType  String?       @map("employment_type")
    salaryRange     String?       @map("salary_range")
    jobDescription  String?       @map("job_description")
    jobRequirements String?       @map("job_requirements")
    createdAt       DateTime      @default(now()) @map("created_at")
    updatedAt       DateTime      @updatedAt @map("updated_at")

    @@index([organizationId])
    @@map("listing")
}

model Image {
    id               String        @id
    organizationId   String        @map("organization_id")
    organization     Organization  @relation("OrganizationImages", fields: [organizationId], references: [id])
    url              String

    // organizationLogo Organization?
    // organizationBanner Organization?

    organizationLogo Organization? @relation("LogoRelation")
    organizationBanner Organization? @relation("BannerRelation")

    createdAt        DateTime      @default(now()) @map("created_at")
    updatedAt        DateTime      @updatedAt @map("updated_at")

    @@unique([organizationId, id])
    @@index([organizationId])
    @@map("image")
}
